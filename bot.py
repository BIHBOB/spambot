import os
import telebot
import vk_api
import time
import threading
import requests
from telebot import types, apihelper
from dotenv import load_dotenv
import signal
import sys
import logging
import uuid

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TELEGRAM_TOKEN or any(char.isspace() for char in TELEGRAM_TOKEN):
    logger.error("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã")
    raise ValueError("TELEGRAM_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")

VK_TOKEN = os.getenv('VK_TOKEN', '')

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
INSTANCE_ID = str(uuid.uuid4())
logger.info(f"–ó–∞–ø—É—â–µ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å ID: {INSTANCE_ID}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
bot = telebot.TeleBot(TELEGRAM_TOKEN, threaded=False)  # –û—Ç–∫–ª—é—á–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
vk_session = vk_api.VkApi(token=VK_TOKEN) if VK_TOKEN else None
vk = vk_session.get_api() if vk_session else None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
VK_Groups = [-211223344, -155667788, -199887766, -188445566, -177334455]
VK_CONVERSATIONS = [2000000001, 2000000005]
DELAY_TIME = 15
DELETE_TIME = 15
SPAM_RUNNING = {'groups': False, 'conversations': False}
SPAM_THREADS = {'groups': [], 'conversations': []}
SPAM_TEMPLATE = "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
bot_started = False

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        "üöÄ –°–ø–∞–º –≤ –≥—Ä—É–ø–ø—ã", "üöÄ –°–ø–∞–º –≤ –±–µ—Å–µ–¥—ã",
        "‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É", "üïí –í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è",
        "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç",
        "‚úçÔ∏è –®–∞–±–ª–æ–Ω –¥–ª—è —Å–ø–∞–º–∞", "üîë –°–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω VK",
        "üóë –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", "üóë –û—á–∏—Å—Ç–∏—Ç—å API VK"
    )
    return markup

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∞–º–∞
def spam_menu(spam_type):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("‚õî –û—Ç–∫–ª—é—á–∏—Ç—å —Å–ø–∞–º")
    markup.add(
        "üöÄ –°–ø–∞–º –≤ –≥—Ä—É–ø–ø—ã", "üöÄ –°–ø–∞–º –≤ –±–µ—Å–µ–¥—ã",
        "‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É", "üïí –í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è",
        "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç",
        "‚úçÔ∏è –®–∞–±–ª–æ–Ω –¥–ª—è —Å–ø–∞–º–∞", "üîë –°–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω VK",
        "üóë –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", "üóë –û—á–∏—Å—Ç–∏—Ç—å API VK"
    )
    return markup

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤
def create_remove_chat_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=1)
    if VK_Groups or VK_CONVERSATIONS:
        for group_id in VK_Groups:
            markup.add(types.InlineKeyboardButton(f"–ì—Ä—É–ø–ø–∞ {group_id}", callback_data=f"remove_group_{group_id}"))
        for conv_id in VK_CONVERSATIONS:
            markup.add(types.InlineKeyboardButton(f"–ë–µ—Å–µ–¥–∞ {conv_id}", callback_data=f"remove_conversation_{conv_id}"))
        markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_remove"))
    else:
        markup.add(types.InlineKeyboardButton("–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", callback_data="no_chats"))
    return markup

# –§—É–Ω–∫—Ü–∏—è —Å–ø–∞–º–∞
def send_and_delete_vk_messages(chat_id, telegram_chat_id):
    global DELAY_TIME, DELETE_TIME, SPAM_TEMPLATE
    while SPAM_RUNNING['groups'] if chat_id < 0 else SPAM_RUNNING['conversations']:
        try:
            if not vk:
                raise Exception("VK API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            msg1 = vk.messages.send(peer_id=chat_id, message=SPAM_TEMPLATE, random_id=int(time.time() * 1000))
            bot.send_message(telegram_chat_id, f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '{SPAM_TEMPLATE}' –≤ VK —á–∞—Ç {chat_id}")
            time.sleep(DELETE_TIME)
            vk.messages.delete(message_ids=[msg1], delete_for_all=1)
            bot.send_message(telegram_chat_id, f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ VK —á–∞—Ç {chat_id}")
            time.sleep(max(0, DELAY_TIME - DELETE_TIME))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ {chat_id}: {str(e)}")
            bot.send_message(telegram_chat_id, f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ {chat_id}: {str(e)}")
            break

# –ü–∏–Ω–≥–æ–≤–∞–Ω–∏–µ
def ping_service():
    global bot_started
    PING_URL = "https://httpbin.org/status/200"
    PING_INTERVAL = 300
    while bot_started:
        try:
            response = requests.get(PING_URL, timeout=10)
            logger.info(f"–ü–∏–Ω–≥: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {str(e)}")
        time.sleep(PING_INTERVAL)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)
@bot.message_handler(commands=['start'])
def send_welcome(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–ø–∞–º–∞ –≤ VK. –≠–∫–∑–µ–º–ø–ª—è—Ä: {INSTANCE_ID}", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == "üöÄ –°–ø–∞–º –≤ –≥—Ä—É–ø–ø—ã")
def start_spam_groups(message):
    global SPAM_RUNNING, SPAM_THREADS
    if not VK_Groups:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç!", reply_markup=main_menu())
        return
    if not vk:
        bot.send_message(message.chat.id, "VK —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", reply_markup=main_menu())
        return
    SPAM_RUNNING['groups'] = True
    SPAM_THREADS['groups'] = []
    for chat_id in VK_Groups[:]:
        thread = threading.Thread(target=send_and_delete_vk_messages, args=(chat_id, message.chat.id))
        thread.start()
        SPAM_THREADS['groups'].append(thread)
    bot.send_message(message.chat.id, "–°–ø–∞–º –∑–∞–ø—É—â–µ–Ω –≤ –≥—Ä—É–ø–ø–∞—Ö VK!", reply_markup=spam_menu('groups'))

@bot.message_handler(func=lambda message: message.text == "üöÄ –°–ø–∞–º –≤ –±–µ—Å–µ–¥—ã")
def start_spam_conversations(message):
    global SPAM_RUNNING, SPAM_THREADS
    if not VK_CONVERSATIONS:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –±–µ—Å–µ–¥ –ø—É—Å—Ç!", reply_markup=main_menu())
        return
    if not vk:
        bot.send_message(message.chat.id, "VK —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", reply_markup=main_menu())
        return
    SPAM_RUNNING['conversations'] = True
    SPAM_THREADS['conversations'] = []
    for chat_id in VK_CONVERSATIONS[:]:
        thread = threading.Thread(target=send_and_delete_vk_messages, args=(chat_id, message.chat.id))
        thread.start()
        SPAM_THREADS['conversations'].append(thread)
    bot.send_message(message.chat.id, "–°–ø–∞–º –∑–∞–ø—É—â–µ–Ω –≤ –±–µ—Å–µ–¥–∞—Ö VK!", reply_markup=spam_menu('conversations'))

@bot.message_handler(func=lambda message: message.text == "‚õî –û—Ç–∫–ª—é—á–∏—Ç—å —Å–ø–∞–º")
def stop_spam(message):
    global SPAM_RUNNING
    SPAM_RUNNING['groups'] = False
    SPAM_RUNNING['conversations'] = False
    bot.send_message(message.chat.id, "–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == "‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É")
def set_delay_prompt(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("15 —Å–µ–∫", callback_data="delay_15"),
        types.InlineKeyboardButton("30 —Å–µ–∫", callback_data="delay_30"),
        types.InlineKeyboardButton("1 –º–∏–Ω", callback_data="delay_60"),
        types.InlineKeyboardButton("5 –º–∏–Ω", callback_data="delay_300")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üïí –í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è")
def set_delete_time_prompt(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("15 —Å–µ–∫", callback_data="delete_15"),
        types.InlineKeyboardButton("30 —Å–µ–∫", callback_data="delete_30"),
        types.InlineKeyboardButton("1 –º–∏–Ω", callback_data="delete_60"),
        types.InlineKeyboardButton("5 –º–∏–Ω", callback_data="delete_300")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–æ —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("delay_"))
def set_delay_callback(call):
    global DELAY_TIME
    DELAY_TIME = int(call.data.split("_")[1])
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                         text=f"–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏: {DELAY_TIME} —Å–µ–∫—É–Ω–¥", reply_markup=None)
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def set_delete_time_callback(call):
    global DELETE_TIME
    DELETE_TIME = int(call.data.split("_")[1])
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                         text=f"–í—Ä–µ–º—è –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {DELETE_TIME} —Å–µ–∫—É–Ω–¥", reply_markup=None)
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å")
def status(message):
    groups_str = ", ".join(map(str, VK_Groups)) if VK_Groups else "–ü—É—Å—Ç–æ"
    convs_str = ", ".join(map(str, VK_CONVERSATIONS)) if VK_CONVERSATIONS else "–ü—É—Å—Ç–æ"
    status_msg = f"–ó–∞–¥–µ—Ä–∂–∫–∞: {DELAY_TIME} —Å–µ–∫\n–í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è: {DELETE_TIME} —Å–µ–∫\n–®–∞–±–ª–æ–Ω: '{SPAM_TEMPLATE}'\n–ì—Ä—É–ø–ø—ã: {groups_str}\n–ë–µ—Å–µ–¥—ã: {convs_str}\n–≠–∫–∑–µ–º–ø–ª—è—Ä: {INSTANCE_ID}"
    bot.send_message(message.chat.id, status_msg, reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç")
def add_chat_prompt(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ ID —á–∞—Ç–∞ VK (- –¥–ª—è –≥—Ä—É–ø–ø—ã, 2000000000+ –¥–ª—è –±–µ—Å–µ–¥—ã):")
    bot.register_next_step_handler(message, add_chat)

def add_chat(message):
    try:
        chat_id = int(message.text)
        if chat_id < 0 and chat_id not in VK_Groups:
            VK_Groups.append(chat_id)
            bot.send_message(message.chat.id, f"–ì—Ä—É–ø–ø–∞ {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu())
        elif chat_id >= 2000000000 and chat_id not in VK_CONVERSATIONS:
            VK_CONVERSATIONS.append(chat_id)
            bot.send_message(message.chat.id, f"–ë–µ—Å–µ–¥–∞ {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, "–ß–∞—Ç —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π ID!", reply_markup=main_menu())
    except ValueError:
        bot.send_message(message.chat.id, "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == "üóë –£–¥–∞–ª–∏—Ç—å —á–∞—Ç")
def remove_chat_prompt(message):
    markup = create_remove_chat_keyboard()
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_") or call.data in ["cancel_remove", "no_chats"])
def handle_remove_chat(call):
    global VK_Groups, VK_CONVERSATIONS
    if call.data == "no_chats":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                            text="–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=None)
    elif call.data == "cancel_remove":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                            text="–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    elif call.data.startswith("remove_group_"):
        group_id = int(call.data.split("_")[2])
        if group_id in VK_Groups:
            VK_Groups = [x for x in VK_Groups if x != group_id]
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"–ì—Ä—É–ø–ø–∞ {group_id} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=None)
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"–ì—Ä—É–ø–ø–∞ {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=None)
    elif call.data.startswith("remove_conversation_"):
        conv_id = int(call.data.split("_")[2])
        if conv_id in VK_CONVERSATIONS:
            VK_CONVERSATIONS = [x for x in VK_CONVERSATIONS if x != conv_id]
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"–ë–µ—Å–µ–¥–∞ {conv_id} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=None)
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"–ë–µ—Å–µ–¥–∞ {conv_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=None)
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == "‚úçÔ∏è –®–∞–±–ª–æ–Ω –¥–ª—è —Å–ø–∞–º–∞")
def edit_template_prompt(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data="edit_template"))
    bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω: '{SPAM_TEMPLATE}'", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "edit_template")
def edit_template_callback(call):
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                         text="–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø–∞–º–∞:", reply_markup=None)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, update_template)

def update_template(message):
    global SPAM_TEMPLATE
    SPAM_TEMPLATE = message.text
    bot.send_message(message.chat.id, f"–®–∞–±–ª–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω: '{SPAM_TEMPLATE}'", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == "üîë –°–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω VK")
def change_vk_token_prompt(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω VK API:")
    bot.register_next_step_handler(message, update_vk_token)

def update_vk_token(message):
    global VK_TOKEN, vk_session, vk
    VK_TOKEN = message.text.strip()
    try:
        vk_session = vk_api.VkApi(token=VK_TOKEN)
        vk = vk_session.get_api()
        vk.account.getInfo()
        bot.send_message(message.chat.id, "–¢–æ–∫–µ–Ω VK –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=main_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}. –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å API VK")
def clear_vk_api_prompt(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear"),
        types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_clear")
    )
    bot.send_message(message.chat.id, "–û—á–∏—Å—Ç–∏—Ç—å API VK –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ["confirm_clear", "cancel_clear"])
def handle_clear_confirmation(call):
    global VK_TOKEN, vk_session, vk, VK_Groups, VK_CONVERSATIONS, DELAY_TIME, DELETE_TIME, SPAM_TEMPLATE, SPAM_RUNNING, SPAM_THREADS
    if call.data == "confirm_clear":
        SPAM_RUNNING['groups'] = SPAM_RUNNING['conversations'] = False
        for threads in SPAM_THREADS.values():
            for thread in threads[:]:
                if thread.is_alive():
                    thread.join()
        SPAM_THREADS = {'groups': [], 'conversations': []}
        VK_TOKEN = ''
        vk_session = None
        vk = None
        VK_Groups = []
        VK_CONVERSATIONS = []
        DELAY_TIME = 15
        DELETE_TIME = 15
        SPAM_TEMPLATE = "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                            text="API VK –æ—á–∏—â–µ–Ω! –ù—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω.", reply_markup=None)
    else:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                            text="–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –ü–æ–ª–ª–∏–Ω–≥ —Å —É—Å–∏–ª–µ–Ω–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
def start_safe_polling():
    global bot_started
    bot_started = True
    retry_count = 0
    max_retries = 5

    # –û—á–∏—Å—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –∏ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
    try:
        bot.remove_webhook()
        logger.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª—ë–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–æ–ª–ª–∏–Ω–≥–∞")
        bot.stop_polling()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—é–±—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Å—Å–∏–∏
        time.sleep(2)  # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {str(e)}")

    while bot_started and retry_count < max_retries:
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {INSTANCE_ID}, –ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}")
            bot.polling(none_stop=True, interval=0, timeout=20)
            break  # –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫, –≤—ã—Ö–æ–¥–∏–º
        except apihelper.ApiTelegramException as e:
            if e.error_code == 409:
                retry_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ 409: –∫–æ–Ω—Ñ–ª–∏–∫—Ç getUpdates (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries})")
                bot.stop_polling()
                time.sleep(5 * retry_count)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                try:
                    bot.remove_webhook()  # –ï—â—ë —Ä–∞–∑ –æ—á–∏—â–∞–µ–º –≤–µ–±—Ö—É–∫
                    logger.info("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–æ–π")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
                continue
            else:
                logger.error(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram API: {str(e)}")
                break
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            break

    if retry_count >= max_retries:
        logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç –≥–¥–µ-—Ç–æ –µ—â—ë.")
        bot_started = False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
def signal_handler(sig, frame):
    global bot_started
    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {INSTANCE_ID}")
    bot_started = False
    bot.stop_polling()
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

if __name__ == "__main__":
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, —ç–∫–∑–µ–º–ø–ª—è—Ä: {INSTANCE_ID}")
    ping_thread = threading.Thread(target=ping_service, daemon=True)
    ping_thread.start()
    start_safe_polling()
