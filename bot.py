import os
import telebot
import vk_api
import time
import threading
import requests
from telebot import types
from dotenv import load_dotenv
import signal
import sys
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Render (–ª–æ–≥–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ stdout)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ —Ç–æ–∫–µ–Ω Telegram –≤—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –Ω–∏–∂–µ)
load_dotenv()

# –¢–æ–∫–µ–Ω—ã –¥–ª—è Telegram –∏ VK
# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω Telegram –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Render
# –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
TELEGRAM_TOKEN = '7506083870:AAFePsqVIvR-8iKfZ9QAc43n7MFqvQKJEMA'
if not TELEGRAM_TOKEN or any(char.isspace() for char in TELEGRAM_TOKEN):
    logger.error("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    raise ValueError("TELEGRAM_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –≤ .env –∏–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render.")

VK_TOKEN = os.getenv('VK_TOKEN', '')  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
vk_session = vk_api.VkApi(token=VK_TOKEN)
vk = vk_session.get_api()

# –°–ø–∏—Å–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø –∏ –±–µ—Å–µ–¥
VK_Groups = [-211223344, -155667788, -199887766, -188445566, -177334455]  # –ì—Ä—É–ø–ø—ã
VK_CONVERSATIONS = [2000000001, 2000000005]  # –ë–µ—Å–µ–¥—ã
DELAY_TIME = 15  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
DELETE_TIME = 15  # –í—Ä–µ–º—è –¥–æ —É–¥–∞–ª–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)
SPAM_RUNNING = {'groups': False, 'conversations': False}  # –§–ª–∞–≥–∏ —Å–ø–∞–º–∞
SPAM_THREADS = {'groups': [], 'conversations': []}  # –ü–æ—Ç–æ–∫–∏ —Å–ø–∞–º–∞
SPAM_TEMPLATE = "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"  # –®–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
bot_started = False

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üöÄ –°–ø–∞–º –≤ –≥—Ä—É–ø–ø—ã"),
        types.KeyboardButton("üöÄ –°–ø–∞–º –≤ –±–µ—Å–µ–¥—ã"),
        types.KeyboardButton("‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É"),
        types.KeyboardButton("üïí –í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è"),
        types.KeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å"),
        types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç"),
        types.KeyboardButton("‚úçÔ∏è –®–∞–±–ª–æ–Ω –¥–ª—è —Å–ø–∞–º–∞"),
        types.KeyboardButton("üîë –°–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω VK"),
        types.KeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å API VK")
    )
    return markup

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
def spam_menu(spam_type):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(types.KeyboardButton("‚õî –û—Ç–∫–ª—é—á–∏—Ç—å —Å–ø–∞–º"))
    markup.add(
        types.KeyboardButton("üöÄ –°–ø–∞–º –≤ –≥—Ä—É–ø–ø—ã"),
        types.KeyboardButton("üöÄ –°–ø–∞–º –≤ –±–µ—Å–µ–¥—ã"),
        types.KeyboardButton("‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É"),
        types.KeyboardButton("üïí –í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è"),
        types.KeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å"),
        types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç"),
        types.KeyboardButton("‚úçÔ∏è –®–∞–±–ª–æ–Ω –¥–ª—è —Å–ø–∞–º–∞"),
        types.KeyboardButton("üîë –°–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω VK"),
        types.KeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å API VK")
    )
    return markup

# –§—É–Ω–∫—Ü–∏—è —Å–ø–∞–º–∞
def send_and_delete_vk_messages(chat_id, telegram_chat_id):
    global DELAY_TIME, DELETE_TIME, SPAM_TEMPLATE
    while SPAM_RUNNING['groups'] if chat_id < 0 else SPAM_RUNNING['conversations']:
        try:
            msg1 = vk.messages.send(peer_id=chat_id, message=SPAM_TEMPLATE, random_id=int(time.time() * 1000))
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '{SPAM_TEMPLATE}' –≤ VK —á–∞—Ç {chat_id}")
            bot.send_message(telegram_chat_id, f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '{SPAM_TEMPLATE}' –≤ VK —á–∞—Ç {chat_id}")
            time.sleep(DELETE_TIME)
            vk.messages.delete(message_ids=[msg1], delete_for_all=1)
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ VK —á–∞—Ç {chat_id}")
            bot.send_message(telegram_chat_id, f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ VK —á–∞—Ç {chat_id}")
            time.sleep(DELAY_TIME - DELETE_TIME if DELAY_TIME > DELETE_TIME else 0)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ {chat_id}: {str(e)}")
            bot.send_message(telegram_chat_id, f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ {chat_id}: {str(e)}")
            break

# –§—É–Ω–∫—Ü–∏—è –ø–∏–Ω–≥–æ–≤–∞–Ω–∏—è
def ping_service():
    global bot_started
    PING_URL = "https://httpbin.org/status/200"  # URL –¥–ª—è –ø–∏–Ω–≥–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –∫–æ–¥ 200
    PING_INTERVAL = 300  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç)

    while bot_started:
        try:
            response = requests.get(PING_URL, timeout=10)
            if response.status_code == 200:
                logger.info("–ü–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω (—Å—Ç–∞—Ç—É—Å 200)")
            else:
                logger.warning(f"–ü–∏–Ω–≥ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {str(e)}")
        time.sleep(PING_INTERVAL)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def send_welcome(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–ø–∞–º–∞ –≤ VK.", reply_markup=main_menu())

# –°–ø–∞–º –≤ –≥—Ä—É–ø–ø—ã
@bot.message_handler(func=lambda message: message.text == "üöÄ –°–ø–∞–º –≤ –≥—Ä—É–ø–ø—ã")
def start_spam_groups(message):
    global SPAM_RUNNING, SPAM_THREADS
    if not VK_Groups:
        logger.warning("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç!")
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç!", reply_markup=main_menu())
        return
    SPAM_RUNNING['groups'] = True
    SPAM_THREADS['groups'] = []
    for chat_id in VK_Groups:
        thread = threading.Thread(target=send_and_delete_vk_messages, args=(chat_id, message.chat.id))
        thread.start()
        SPAM_THREADS['groups'].append(thread)
    logger.info("–°–ø–∞–º –∑–∞–ø—É—â–µ–Ω –≤ –≥—Ä—É–ø–ø–∞—Ö VK!")
    bot.send_message(message.chat.id, "–°–ø–∞–º –∑–∞–ø—É—â–µ–Ω –≤ –≥—Ä—É–ø–ø–∞—Ö VK!", reply_markup=spam_menu('groups'))

# –°–ø–∞–º –≤ –±–µ—Å–µ–¥—ã
@bot.message_handler(func=lambda message: message.text == "üöÄ –°–ø–∞–º –≤ –±–µ—Å–µ–¥—ã")
def start_spam_conversations(message):
    global SPAM_RUNNING, SPAM_THREADS
    if not VK_CONVERSATIONS:
        logger.warning("–°–ø–∏—Å–æ–∫ –±–µ—Å–µ–¥ –ø—É—Å—Ç!")
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –±–µ—Å–µ–¥ –ø—É—Å—Ç!", reply_markup=main_menu())
        return
    SPAM_RUNNING['conversations'] = True
    SPAM_THREADS['conversations'] = []
    for chat_id in VK_CONVERSATIONS:
        thread = threading.Thread(target=send_and_delete_vk_messages, args=(chat_id, message.chat.id))
        thread.start()
        SPAM_THREADS['conversations'].append(thread)
    logger.info("–°–ø–∞–º –∑–∞–ø—É—â–µ–Ω –≤ –±–µ—Å–µ–¥–∞—Ö VK!")
    bot.send_message(message.chat.id, "–°–ø–∞–º –∑–∞–ø—É—â–µ–Ω –≤ –±–µ—Å–µ–¥–∞—Ö VK!", reply_markup=spam_menu('conversations'))

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–ø–∞–º–∞
@bot.message_handler(func=lambda message: message.text == "‚õî –û—Ç–∫–ª—é—á–∏—Ç—å —Å–ø–∞–º")
def stop_spam(message):
    global SPAM_RUNNING
    SPAM_RUNNING['groups'] = False
    SPAM_RUNNING['conversations'] = False
    logger.info("–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    bot.send_message(message.chat.id, "–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", reply_markup=main_menu())

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É
@bot.message_handler(func=lambda message: message.text == "‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É")
def set_delay_prompt(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("15 —Å–µ–∫", callback_data="delay_15"),
        types.InlineKeyboardButton("30 —Å–µ–∫", callback_data="delay_30"),
        types.InlineKeyboardButton("1 –º–∏–Ω", callback_data="delay_60"),
        types.InlineKeyboardButton("5 –º–∏–Ω", callback_data="delay_300")
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–µ—Ä–∂–∫–∏")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏:", reply_markup=markup)

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == "üïí –í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è")
def set_delete_time_prompt(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("15 —Å–µ–∫", callback_data="delete_15"),
        types.InlineKeyboardButton("30 —Å–µ–∫", callback_data="delete_30"),
        types.InlineKeyboardButton("1 –º–∏–Ω", callback_data="delete_60"),
        types.InlineKeyboardButton("5 –º–∏–Ω", callback_data="delete_300")
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Ä–µ–º–µ–Ω–∏ —É–¥–∞–ª–µ–Ω–∏—è")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–æ —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("delay_"))
def set_delay_callback(call):
    global DELAY_TIME
    DELAY_TIME = int(call.data.split("_")[1])
    logger.info(f"–ó–∞–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {DELAY_TIME} —Å–µ–∫—É–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.message.chat.id}")
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=f"–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏: {DELAY_TIME} —Å–µ–∫—É–Ω–¥", reply_markup=None)
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–∞–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def set_delete_time_callback(call):
    global DELETE_TIME
    DELETE_TIME = int(call.data.split("_")[1])
    logger.info(f"–í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {DELETE_TIME} —Å–µ–∫—É–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.message.chat.id}")
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=f"–í—Ä–µ–º—è –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {DELETE_TIME} —Å–µ–∫—É–Ω–¥", reply_markup=None)
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –°—Ç–∞—Ç—É—Å
@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å")
def status(message):
    groups_str = ", ".join(map(str, VK_Groups)) if VK_Groups else "–ü—É—Å—Ç–æ"
    convs_str = ", ".join(map(str, VK_CONVERSATIONS)) if VK_CONVERSATIONS else "–ü—É—Å—Ç–æ"
    status_msg = f"–ó–∞–¥–µ—Ä–∂–∫–∞: {DELAY_TIME} —Å–µ–∫\n–í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è: {DELETE_TIME} —Å–µ–∫\n–®–∞–±–ª–æ–Ω: '{SPAM_TEMPLATE}'\n–ì—Ä—É–ø–ø—ã: {groups_str}\n–ë–µ—Å–µ–¥—ã: {convs_str}"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å: {status_msg}")
    bot.send_message(message.chat.id, status_msg, reply_markup=main_menu())

# –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç
@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç")
def add_chat_prompt(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ ID —á–∞—Ç–∞ VK (- –¥–ª—è –≥—Ä—É–ø–ø—ã, 2000000000+ –¥–ª—è –±–µ—Å–µ–¥—ã):")
    bot.register_next_step_handler(message, add_chat)

def add_chat(message):
    try:
        chat_id = int(message.text)
        if chat_id < 0:
            if chat_id not in VK_Groups:
                VK_Groups.append(chat_id)
                logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.chat.id}")
                bot.send_message(message.chat.id, f"–ì—Ä—É–ø–ø–∞ {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu())
            else:
                logger.warning(f"–ì—Ä—É–ø–ø–∞ {chat_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
                bot.send_message(message.chat.id, "–ì—Ä—É–ø–ø–∞ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ!", reply_markup=main_menu())
        elif chat_id >= 2000000000:
            if chat_id not in VK_CONVERSATIONS:
                VK_CONVERSATIONS.append(chat_id)
                logger.info(f"–ë–µ—Å–µ–¥–∞ {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.chat.id}")
                bot.send_message(message.chat.id, f"–ë–µ—Å–µ–¥–∞ {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu())
            else:
                logger.warning(f"–ë–µ—Å–µ–¥–∞ {chat_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
                bot.send_message(message.chat.id, "–ë–µ—Å–µ–¥–∞ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ!", reply_markup=main_menu())
        else:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π ID —á–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID!", reply_markup=main_menu())
    except ValueError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ ID –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
        bot.send_message(message.chat.id, "ID ‚Äî —á–∏—Å–ª–æ!", reply_markup=main_menu())

# –®–∞–±–ª–æ–Ω –¥–ª—è —Å–ø–∞–º–∞
@bot.message_handler(func=lambda message: message.text == "‚úçÔ∏è –®–∞–±–ª–æ–Ω –¥–ª—è —Å–ø–∞–º–∞")
def edit_template_prompt(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data="edit_template"))
    bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω: '{SPAM_TEMPLATE}'", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "edit_template")
def edit_template_callback(call):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.message.chat.id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞")
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø–∞–º–∞:", reply_markup=None)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, update_template)

def update_template(message):
    global SPAM_TEMPLATE
    SPAM_TEMPLATE = message.text
    logger.info(f"–®–∞–±–ª–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.chat.id} –Ω–∞: '{SPAM_TEMPLATE}'")
    bot.send_message(message.chat.id, f"–®–∞–±–ª–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω: '{SPAM_TEMPLATE}'", reply_markup=main_menu())

# –°–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ VK
@bot.message_handler(func=lambda message: message.text == "üîë –°–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω VK")
def change_vk_token_prompt(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–º–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ VK")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω VK API:")
    bot.register_next_step_handler(message, update_vk_token)

def update_vk_token(message):
    global VK_TOKEN, vk_session, vk
    new_token = message.text.strip()
    VK_TOKEN = new_token
    try:
        vk_session = vk_api.VkApi(token=VK_TOKEN)
        vk = vk_session.get_api()
        vk.account.getInfo()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        logger.info(f"–¢–æ–∫–µ–Ω VK —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.chat.id}")
        bot.send_message(message.chat.id, "–¢–æ–∫–µ–Ω VK —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}: {str(e)}")
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}. –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!", reply_markup=main_menu())

# –û—á–∏—Å—Ç–∫–∞ API VK —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
@bot.message_handler(func=lambda message: message.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å API VK")
def clear_vk_api_prompt(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—á–∏—Å—Ç–∫—É API VK")
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear"),
        types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_clear")
    )
    bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å API VK –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ["confirm_clear", "cancel_clear"])
def handle_clear_confirmation(call):
    if call.data == "confirm_clear":
        global VK_TOKEN, vk_session, vk, VK_Groups, VK_CONVERSATIONS, DELAY_TIME, DELETE_TIME, SPAM_TEMPLATE, SPAM_RUNNING, SPAM_THREADS
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–∞–º-–ø–æ—Ç–æ–∫–æ–≤
        SPAM_RUNNING['groups'] = False
        SPAM_RUNNING['conversations'] = False
        for threads in SPAM_THREADS.values():
            for thread in threads:
                if thread and thread.is_alive():
                    thread.join()  # –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        SPAM_THREADS = {'groups': [], 'conversations': []}

        # –°–±—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö VK
        VK_TOKEN = ''
        vk_session = None
        vk = None
        VK_Groups = []
        VK_CONVERSATIONS = []

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        DELAY_TIME = 15
        DELETE_TIME = 15
        SPAM_TEMPLATE = "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

        logger.info(f"API VK –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.message.chat.id}")
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="API VK –∏ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã! –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω VK –¥–ª—è —Ä–∞–±–æ—Ç—ã.", reply_markup=main_menu())
    else:
        logger.info(f"–û—á–∏—Å—Ç–∫–∞ API VK –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.message.chat.id}")
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu())
    bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
def signal_handler(sig, frame):
    global bot_started
    logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...')
    bot_started = False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∏–Ω–≥–æ–≤–∞–Ω–∏–µ
    bot.stop_polling()
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–∏–Ω–≥–æ–≤–∞–Ω–∏–µ–º
if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot_started = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω

    # –ó–∞–ø—É—Å–∫ –ø–∏–Ω–≥–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    ping_thread = threading.Thread(target=ping_service, daemon=True)
    ping_thread.start()

    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        bot_started = False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∏–Ω–≥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        sys.exit(1)
